(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{249:function(t,a,s){"use strict";s.r(a);var e=s(0),v=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"为什么-的结果为false，而-的结果为true"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么-的结果为false，而-的结果为true"}},[t._v("#")]),t._v(" 为什么[]==[]的结果为false，而[]==![]的结果为true")]),t._v(" "),s("p",[t._v("接下来我们来分析下为什么会有这样的结果：")]),t._v(" "),s("p",[t._v("首先，"),s("code",[t._v("[]==[]")]),t._v("结果为"),s("code",[t._v("false")]),t._v("，这个比较简单，两个引用类型的比较，比较的是引用地址，"),s("code",[t._v("[]==[]")]),t._v("这俩对象的引用地址不一样，所以必定为false。")]),t._v(" "),s("p",[t._v("我们着重分析下"),s("code",[t._v("[]==![]")]),t._v("。")]),t._v(" "),s("p",[t._v("根据运算符的优先级，"),s("code",[t._v("!")]),t._v("的优先级是大于"),s("code",[t._v("==")]),t._v("的，所以会先执行"),s("code",[t._v("![]")]),t._v("。")]),t._v(" "),s("p",[s("code",[t._v("!")]),t._v("可将变量转换为"),s("code",[t._v("boolean")]),t._v("类型，"),s("code",[t._v("null")]),t._v("、"),s("code",[t._v("undefined")]),t._v("、"),s("code",[t._v("NaN")]),t._v("以及"),s("code",[t._v("空字符串")]),t._v("取反都为"),s("code",[t._v("true")]),t._v("，其余都为"),s("code",[t._v("false")]),t._v("。")]),t._v(" "),s("p",[t._v("所以"),s("code",[t._v("![]")]),t._v("运算后的结果是"),s("code",[t._v("false")]),t._v("，也就是"),s("code",[t._v("[]==![]")]),t._v("相当于"),s("code",[t._v("[]==false")])]),t._v(" "),s("p",[t._v("上一篇文章我们提到：判断其中一方是否为"),s("code",[t._v("boolean")]),t._v("，是的话就会把"),s("code",[t._v("boolean")]),t._v("转换为"),s("code",[t._v("number")]),t._v("再进行判断（"),s("code",[t._v("false")]),t._v("转换为"),s("code",[t._v("0")]),t._v(","),s("code",[t._v("true")]),t._v("转换为"),s("code",[t._v("1")]),t._v("）")]),t._v(" "),s("p",[t._v("也就是表达式变成了"),s("code",[t._v("[]==0")])]),t._v(" "),s("p",[t._v("判断其中一方是否为"),s("code",[t._v("object")]),t._v("，另一方为"),s("code",[t._v("string")]),t._v("、"),s("code",[t._v("number")]),t._v("、或"),s("code",[t._v("symbol")]),t._v("，是的话就会把"),s("code",[t._v("objec")]),t._v("t转换为原始类型再进行判断")]),t._v(" "),s("p",[t._v("如果一个操作数是对象，另一个操作数不是，则调用对象的"),s("code",[t._v("valueOf()")]),t._v("方法，用得到的基本类型值再进行比较，如果对象没有"),s("code",[t._v("valueOf()")]),t._v("方法，则调用"),s("code",[t._v("toString()")]),t._v("。")]),t._v(" "),s("p",[t._v("对于空数组，"),s("code",[t._v("[].toString()")]),t._v("返回的是空字符串"),s("code",[t._v('""')]),t._v("。")]),t._v(" "),s("p",[t._v("所以，现在表达式就变成了"),s("code",[t._v('""==0')]),t._v("了。")]),t._v(" "),s("p",[t._v("判断两者类型是否为"),s("code",[t._v("string")]),t._v("和"),s("code",[t._v("number")]),t._v("，是的话就将字符串转换为"),s("code",[t._v("number")]),t._v("。")]),t._v(" "),s("p",[t._v("这里，"),s("code",[t._v('Number("")')]),t._v("返回的是"),s("code",[t._v("0")]),t._v("。")]),t._v(" "),s("p",[t._v("所以最终的表达式就变成了"),s("code",[t._v("0==0")]),t._v("了，自然结果也就是"),s("code",[t._v("true")]),t._v("了。")]),t._v(" "),s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("p",[t._v("比较过程如下：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n")])])]),s("p",[t._v("那么对于"),s("code",[t._v("{}==!{}")]),t._v("，也是同理的。")]),t._v(" "),s("p",[t._v("关键在于："),s("code",[t._v("{}.toString()")]),t._v("返回的是"),s("code",[t._v("NaN")]),t._v("。")]),t._v(" "),s("p",[t._v("如果有其中一方是"),s("code",[t._v("NaN")]),t._v("，则相等操作符返回"),s("code",[t._v("false")]),t._v("，而不相等操作符返回"),s("code",[t._v("true")]),t._v("。")]),t._v(" "),s("p",[s("code",[t._v("{}==!{}")]),t._v("的最终表达式为：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n")])])]),s("p",[t._v("所以"),s("code",[t._v("{}==!{}")]),t._v("的结果为"),s("code",[t._v("false")]),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"最后"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#最后"}},[t._v("#")]),t._v(" 最后")]),t._v(" "),s("p",[t._v("感谢您的阅读，希望对你有所帮助。由于本人水平有限，如果文中有不当的地方烦请指正，感激不尽。")])])}),[],!1,null,null,null);a.default=v.exports}}]);