(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{253:function(e,v,a){"use strict";a.r(v);var _=a(0),t=Object(_.a)({},(function(){var e=this,v=e.$createElement,a=e._self._c||v;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"如何让-a-1-a-2-a-3-的值为true？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何让-a-1-a-2-a-3-的值为true？"}},[e._v("#")]),e._v(" 如何让 (a == 1 && a == 2 && a == 3) 的值为true？")]),e._v(" "),a("p",[e._v("首先要解答这道题，要先搞懂"),a("code",[e._v("==")]),e._v("的工作机制。")]),e._v(" "),a("h2",{attrs:{id:"运算符的工作机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运算符的工作机制"}},[e._v("#")]),e._v(" "),a("code",[e._v("==")]),e._v("运算符的工作机制")]),e._v(" "),a("p",[e._v("对于"),a("code",[e._v("==")]),e._v("来说，如果对比双方类型不一样的话，就会先进行类型转换。")]),e._v(" "),a("p",[e._v("假设我们需要对比"),a("code",[e._v("x")]),e._v("和"),a("code",[e._v("y")]),e._v("是否相同，就会进行如下判断流程：")]),e._v(" "),a("p",[e._v("1.首先会判断两者类型是否相同，相同的话就比较大小了")]),e._v(" "),a("p",[e._v("2.类型不相同的话，那么就进行类型转换")]),e._v(" "),a("p",[e._v("3.判断两者类型是否为"),a("code",[e._v("string")]),e._v("和"),a("code",[e._v("number")]),e._v("，是的话就将字符串转换为"),a("code",[e._v("number")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("1 == '1';\n比较过程如下：\n1 == 1; // true\n")])])]),a("p",[e._v("4.判断其中一方是否为"),a("code",[e._v("boolean")]),e._v("，是的话就会把"),a("code",[e._v("boolean")]),e._v("转换为"),a("code",[e._v("number")]),e._v("再进行判断")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("'1' == true;\n比较过程如下：\n'1' == 1;\n1 == 1; // true\n")])])]),a("p",[e._v("5.判断其中一方是否为"),a("code",[e._v("object")]),e._v("，另一方为"),a("code",[e._v("string")]),e._v("、"),a("code",[e._v("number")]),e._v("、或"),a("code",[e._v("symbol")]),e._v("，是的话就会把"),a("code",[e._v("object")]),e._v("转换为原始类型再进行判断")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("'1' == { name: 'dazhi' }\n比较过程如下：\n'1' == '[object object]'\n")])])]),a("p",[e._v("6.会先判断是否在对比"),a("code",[e._v("null")]),e._v("和"),a("code",[e._v("undefined")]),e._v("，是的话就返回"),a("code",[e._v("true")])]),e._v(" "),a("p",[e._v("7.要比较相等性之前，不能将"),a("code",[e._v("null")]),e._v("和"),a("code",[e._v("undefined")]),e._v("转换成其他任何值")]),e._v(" "),a("p",[e._v("8.如果有其中一方是"),a("code",[e._v("NaN")]),e._v("，则相等操作符返回"),a("code",[e._v("false")]),e._v("，而不相等操作符返回"),a("code",[e._v("true")]),e._v("。")]),e._v(" "),a("p",[a("strong",[e._v("重要提示：即使两个操作数都是"),a("code",[e._v("NaN")]),e._v("，相等操作符也返回"),a("code",[e._v("false")]),e._v("了；因为按照规则，"),a("code",[e._v("NaN")]),e._v("不等于"),a("code",[e._v("NaN")])])]),e._v(" "),a("p",[e._v("弄懂了"),a("code",[e._v("==")]),e._v("的工作机制，我们再回到题目：")]),e._v(" "),a("h2",{attrs:{id:"a-1-a-2-a-3-true"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#a-1-a-2-a-3-true"}},[e._v("#")]),e._v(" (a == 1 && a == 2 && a == 3) == true")]),e._v(" "),a("p",[e._v("根据题目，我们可以推断"),a("code",[e._v("a")]),e._v("不可能是一个基本数据类型，因为"),a("code",[e._v("a")]),e._v("如果是"),a("code",[e._v("null")]),e._v("、"),a("code",[e._v("undefined")]),e._v("或者"),a("code",[e._v("boolean")]),e._v("，这个等式根本不会成立。所以"),a("code",[e._v("a")]),e._v("肯定是一个复杂数据类型："),a("code",[e._v("object")]),e._v("，有可能是一个对象"),a("code",[e._v("{}")]),e._v("或者是数组"),a("code",[e._v("[]")]),e._v("。")]),e._v(" "),a("p",[e._v("当一个对象"),a("code",[e._v("object")]),e._v("和数值做"),a("code",[e._v("==")]),e._v("比较的时候，会先把"),a("code",[e._v("object")]),e._v("转换为原始类型再进行比较。")]),e._v(" "),a("p",[e._v("所以，我们还需明白"),a("code",[e._v("object")]),e._v("到原始类型转换的一个过程：")]),e._v(" "),a("ul",[a("li",[e._v("如果部署了"),a("code",[e._v("[Symbol.toPrimitive]")]),e._v("接口，那么调用此接口，若返回的不是基本数据类型，抛出错误。")]),e._v(" "),a("li",[e._v("如果没有部署"),a("code",[e._v("[Symbol.toPrimitive]")]),e._v("接口，那么调用"),a("code",[e._v("valueOf")]),e._v("接口，若返回的不是基本数据类型，那么调用"),a("code",[e._v("toString")]),e._v("接口，若返回的还不是基本数据类型，那么抛出异常。")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let obj = {\n  [Symbol.toPrimitive]() {\n    return 100;\n  },\n\n  valueOf() {\n    return 200;\n  }\n}\n\nlet obj2 = {\n  valueOf() {\n    return 200;\n  },\n\n  toString() {\n    return 300;\n  }\n}\n\nconsole.log(obj == 100); // true\nconsole.log(obj2 == 200); // true\n")])])]),a("p",[a("strong",[e._v("上面代码说明，它们之间的一个的优先调用顺序是："),a("code",[e._v("[Symbol.toPrimitive]")]),e._v(" > "),a("code",[e._v("valueOf")]),e._v(" > "),a("code",[e._v("toString")]),e._v("。")])]),e._v(" "),a("h3",{attrs:{id:"当a是一个-时"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#当a是一个-时"}},[e._v("#")]),e._v(" 当"),a("code",[e._v("a")]),e._v("是一个"),a("code",[e._v("{}")]),e._v("时")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var a = {\n  [Symbol.toPrimitive]: (function () {\n    let i = 1;\n    //闭包的特性之一：i 不会被回收\n    return function () {\n      return i++;\n    }\n  })()\n}\n\nconsole.log(a == 1 && a == 2 && a == 3); // true\n")])])]),a("p",[e._v("如果没有部署"),a("code",[e._v("[Symbol.toPrimitive]")]),e._v("接口，则会调用"),a("code",[e._v("valueOf")]),e._v("接口，所以下面的代码也是可以的：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var a = {\n  valueOf: (function () {\n    let i = 1;\n    //闭包的特性之一：i 不会被回收\n    return function () {\n      return i++;\n    }\n  })()\n}\n\nconsole.log(a == 1 && a == 2 && a == 3); // true\n")])])]),a("h3",{attrs:{id:"当a是一个-数组时"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#当a是一个-数组时"}},[e._v("#")]),e._v(" 当"),a("code",[e._v("a")]),e._v("是一个"),a("code",[e._v("[]")]),e._v("数组时")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var a = [1,2,3];\na.join = a.shift;\nconsole.log(a == 1 && a == 2 && a == 3); // true\n")])])]),a("p",[e._v("不得不说，此方法真的是很巧妙。\n数组也是一个对象，所以也遵循对象到原始类型的转化过程，然后又利用数组的"),a("code",[e._v("Array.prototype.toString()")]),e._v("内部调用的是"),a("code",[e._v("Array.prototype.join()")]),e._v("，所以把"),a("code",[e._v("join")]),e._v("重写为"),a("code",[e._v("shift")]),e._v("，这样当比较"),a("code",[e._v("a == 1")]),e._v("时，相当于执行了")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("a.shift();\n")])])]),a("p",[e._v("由于"),a("code",[e._v("shift()")]),e._v("方法会改变原数组，并删除数组的第一个元素，然后把该元素返回回去。所以第一次比较删除的就是"),a("code",[e._v("1")]),e._v("，并把"),a("code",[e._v("1")]),e._v("返回回去，"),a("code",[e._v("a == 1")]),e._v("就为"),a("code",[e._v("true")]),e._v("了，然后原数组"),a("code",[e._v("a")]),e._v("就变成了"),a("code",[e._v("[2,3]")]),e._v("，以此类推。")]),e._v(" "),a("p",[e._v("根据这个原理，下面的代码也是等价的：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var a = [3,2,1];\na.join = a.pop;\nconsole.log(a == 1 && a == 2 && a == 3); // true\n")])])]),a("h3",{attrs:{id:"利用数据劫持"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#利用数据劫持"}},[e._v("#")]),e._v(" 利用数据劫持")]),e._v(" "),a("p",[a("code",[e._v("数据劫持")]),e._v("还是第一次听到，过后需要好好补下这块相关的知识。")]),e._v(" "),a("p",[e._v("重写"),a("code",[e._v("a")]),e._v("属性的"),a("code",[e._v("getter")]),e._v("方法")]),e._v(" "),a("p",[e._v("使用"),a("code",[e._v("Object.defineProperty")]),e._v("定义的属性，在获取属性时，会调用"),a("code",[e._v("get")]),e._v("方法。利用这个特性，我们在"),a("code",[e._v("window")]),e._v("对象上定义"),a("code",[e._v("a")]),e._v("属性，如下：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let i = 1;\nObject.defineProperty(window, 'a', {\n  get: function() {\n    return i++;\n  }\n})\nconsole.log(a == 1 && a == 2 && a == 3); // true\n")])])]),a("h3",{attrs:{id:"proxy形式实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#proxy形式实现"}},[e._v("#")]),e._v(" Proxy形式实现")]),e._v(" "),a("p",[e._v("这个也是盲点，过后也需要好好学习下。")]),e._v(" "),a("p",[e._v("利用ES6新增的"),a("code",[e._v("Proxy")]),e._v("来实现：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const a = new Proxy({}, {\n  v: 1,\n  get: function() {\n    return () => this.v++;\n  }\n});\nconsole.log(a == 1 && a == 2 && a == 3); // true\n")])])])])}),[],!1,null,null,null);v.default=t.exports}}]);