(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{252:function(t,a,s){"use strict";s.r(a);var n=s(0),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"js中基本数据类型有哪几种？null-是对象吗？基本数据和复杂数据类型有什么区别？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#js中基本数据类型有哪几种？null-是对象吗？基本数据和复杂数据类型有什么区别？"}},[t._v("#")]),t._v(" JS中基本数据类型有哪几种？null 是对象吗？基本数据和复杂数据类型有什么区别？")]),t._v(" "),s("h2",{attrs:{id:"基本数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本数据类型"}},[t._v("#")]),t._v(" 基本数据类型")]),t._v(" "),s("p",[t._v("基本数据类型有7种")]),t._v(" "),s("ul",[s("li",[t._v("null")]),t._v(" "),s("li",[t._v("undefined")]),t._v(" "),s("li",[t._v("string")]),t._v(" "),s("li",[t._v("number")]),t._v(" "),s("li",[t._v("boolean")]),t._v(" "),s("li",[t._v("symbol(ES6新增)")]),t._v(" "),s("li",[t._v("BigInt(ES10新增)")])]),t._v(" "),s("p",[t._v("关于"),s("code",[t._v("BigInt")]),t._v("，可以阅读以下链接的文章来学习：")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/BigInt",target:"_blank"}},[t._v("https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/BigInt")])]),t._v(" "),s("p",[s("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/36330307",target:"_blank"}},[t._v("https://zhuanlan.zhihu.com/p/36330307")])]),t._v(" "),s("h2",{attrs:{id:"复杂数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#复杂数据类型"}},[t._v("#")]),t._v(" 复杂数据类型")]),t._v(" "),s("p",[t._v("复杂数据类型就一种")]),t._v(" "),s("ul",[s("li",[t._v("object")])]),t._v(" "),s("h2",{attrs:{id:"null是对象吗？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#null是对象吗？"}},[t._v("#")]),t._v(" null是对象吗？")]),t._v(" "),s("p",[t._v("先看下"),s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/null",target:"_blank",rel:"noopener noreferrer"}},[t._v("MDN"),s("OutboundLink")],1),t._v("上的解释：")]),t._v(" "),s("blockquote",[s("p",[t._v("值 "),s("code",[t._v("null")]),t._v(" 特指对象的值未设置。它是 JavaScript 基本类型 之一。")])]),t._v(" "),s("p",[t._v("由此可见，"),s("code",[t._v("null")]),t._v("并不是一个对象，虽然"),s("code",[t._v("typeof null")]),t._v("返回的值为"),s("code",[t._v('"object"')]),t._v("。")]),t._v(" "),s("p",[t._v("插入图片")]),t._v(" "),s("p",[t._v("《你不知道的JavaScript(上卷)》这本书说过：")]),t._v(" "),s("blockquote",[s("p",[t._v("null 有时会被当做一种对象类型，但是这其实只是语言本身的一个bug，即对"),s("code",[t._v("null")]),t._v("执行"),s("code",[t._v("typeof null")]),t._v("时会返回字符串"),s("code",[t._v('"object"')]),t._v("。实际上，"),s("code",[t._v("null")]),t._v("本身是基本类型。")])]),t._v(" "),s("blockquote",[s("p",[t._v("原理是这样的，不同的对象在底层都表示为二进制，在JavaScript中二进制前三位都为0的话会被判断为object类型，null的二进制表示是全0，自然前三位也是0，所以执行typeof时会返回“object”。")])]),t._v(" "),s("h3",{attrs:{id:"思考：为什么typeof-null会返回-object-而不是-null-？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#思考：为什么typeof-null会返回-object-而不是-null-？"}},[t._v("#")]),t._v(" 思考：为什么"),s("code",[t._v("typeof null")]),t._v("会返回"),s("code",[t._v('"object"')]),t._v("而不是"),s("code",[t._v('"null"')]),t._v("？")]),t._v(" "),s("p",[t._v("大家可以看下"),s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/typeof",target:"_blank",rel:"noopener noreferrer"}},[t._v("MDN"),s("OutboundLink")],1),t._v("上的解释：")]),t._v(" "),s("blockquote",[s("p",[t._v('在 JavaScript 最初的实现中，JavaScript 中的值是由一个表示类型的标签和实际数据值表示的。对象的类型标签是 0。由于 null 代表的是空指针（大多数平台下值为 0x00），因此，null的类型标签也成为了 0，typeof null就错误的返回了"object"。')])]),t._v(" "),s("blockquote",[s("p",[t._v("ECMAScript提出了一个修复（通过opt-in），但被拒绝。这将导致typeof null === 'null'。")])]),t._v(" "),s("p",[t._v("感兴趣的，也可以看下这篇文章："),s("a",{attrs:{href:"http://www.cnblogs.com/xiaoheimiaoer/p/4572558.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://www.cnblogs.com/xiaoheimiaoer/p/4572558.html"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"基本数据和复杂数据类型有什么区别？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本数据和复杂数据类型有什么区别？"}},[t._v("#")]),t._v(" 基本数据和复杂数据类型有什么区别？")]),t._v(" "),s("h3",{attrs:{id:"_1-声明变量时不同的内存分配"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-声明变量时不同的内存分配"}},[t._v("#")]),t._v(" 1.声明变量时不同的内存分配")]),t._v(" "),s("p",[t._v("基本数据类型：存储在栈中的简单数据段，也就是说，它们的值直接存储在变量访问的位置。这是因为它们占据的空间是固定的，所以可将它们存储在较小的内存区域-栈。这样存储便于迅速查寻变量的值。")]),t._v(" "),s("p",[t._v("复杂数据类型：存储在堆中的对象，栈中存储的变量的值是一个指针，指向堆中的引用地址。这是因为复杂数据类型的值是会改变的，所以不能把它放在栈中，否则会降低变量查寻的速度。")]),t._v(" "),s("h3",{attrs:{id:"_2-不同的访问机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-不同的访问机制"}},[t._v("#")]),t._v(" 2.不同的访问机制")]),t._v(" "),s("p",[t._v("在JavaScript中，是不允许直接访问保存在堆内存中的对象的，所以在访问一个对象时，首先得到的是这个对象在堆内存中的地址，然后再按照这个地址去获得对象中的值。这就是传说中的"),s("strong",[t._v("按引用访问")]),t._v("。")]),t._v(" "),s("p",[t._v("而基本数据类型的值是可以直接访问得到的，即"),s("strong",[t._v("按值访问")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"_3-复制变量时的不同"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-复制变量时的不同"}},[t._v("#")]),t._v(" 3.复制变量时的不同")]),t._v(" "),s("p",[t._v("基本数据类型：在将保存着原始值的变量复制给另一个变量时，会将原始值的副本赋值给新变量，此后这两个变量是完全独立的，不会相互影响，只是它们拥有相同的value而已。")]),t._v(" "),s("p",[t._v("看下面的例子：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nb "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 10")]),t._v("\n")])])]),s("p",[t._v("上面的代码说明：b获取的是a值的一份拷贝，虽然两个变量的值相等，但是两个变量保存了两个不同的基本数据类型，它们之间不会相互影响。")]),t._v(" "),s("p",[t._v("复杂数据类型：在将一个保存着对象内存地址的变量复制给另一个变量时，会把这个内存地址赋值给新变量，也就是说两个变量都指向了堆内存中d的同一个对象，它们中任何一个作出的改变都会反映在另一个身上。（这里要理解的一点就是，复制对象时并不会在堆内存中新生成一个一模一样的对象，只是多了一个保存指向这个对象的指针罢了）")]),t._v(" "),s("p",[t._v("看下面的例子：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'dazhi'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'dazhi_fe'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "dazhi_fe"')]),t._v("\n")])])]),s("p",[t._v("上面的代码说明：a和b都指向了同一个堆中的对象，所以对其中一个作出改变，另一个也会跟着改变。")]),t._v(" "),s("h3",{attrs:{id:"_4-参数传递的不同"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-参数传递的不同"}},[t._v("#")]),t._v(" 4.参数传递的不同")]),t._v(" "),s("p",[t._v("首先我们应该明确一点：ECMAScript中所有函数的参数都是"),s("strong",[t._v("按值来传递")]),t._v("的。这也是我们容易疑惑的地方，因为访问变量有按值和按引用两种方式，而参数只能按值传递。这一点等下我们举例来说明。")]),t._v(" "),s("p",[t._v("基本数据类型：拷贝的是值")]),t._v(" "),s("p",[t._v("看例子：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addTen")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("num")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" num"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" count "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addTen")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 20，没有变化")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 30")]),t._v("\n")])])]),s("p",[t._v("只是把变量的值传递给参数，之后参数和这个变量互不影响。")]),t._v(" "),s("p",[t._v("复杂数据类型：拷贝的是引用地址")]),t._v(" "),s("p",[t._v("看例子：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("obj")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Nicholas"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" person "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'jack'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("person"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("person"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "Nicholas"')]),t._v("\n")])])]),s("p",[t._v("以上代码创建了一个对象，并将其保存在了变量person中。然后这个变量被传递到setName()函数之中就被复制给了obj。在这个函数内部，ojb和person引用的是同一个对象。于是在函数内部修改了name属性后，函数外部的person也会有所反映。所以我们会错误的认为：在局部作用域中修改的对象会在全局作用域中反映出来，就说明参数是按引用传递的。")]),t._v(" "),s("p",[t._v("为了证明对象是按值传递的，我们再来看一个例子：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    value"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'111'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    value"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'222'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("changeStuff")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("obj")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'333'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" obj2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" foo "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("changeStuff")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("foo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 222 参数obj指向了新的对象obj2")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 333")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("obj1仍然指向原来的对象，之所以value改变了，是因为changeStuff里的第一条语句，这个时候obj是指向obj1的；如果是按引用传递的话，这个时候obj1.value应该是等于'222'的。")])]),t._v(" "),s("p",[t._v("实际上，在函数内部重写obj时，这个变量引用的就是一个局部对象了。而这个局部对象会在函数执行完毕后立即销毁。")]),t._v(" "),s("h2",{attrs:{id:"最后"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#最后"}},[t._v("#")]),t._v(" 最后")]),t._v(" "),s("p",[t._v("感谢您的阅读，希望对你有所帮助。由于本人水平有限，如果文中有不当的地方烦请指正，感激不尽。")]),t._v(" "),s("p",[t._v("参考：")]),t._v(" "),s("ol",[s("li",[s("p",[s("a",{attrs:{href:"https://www.zhihu.com/question/27114726",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.zhihu.com/question/27114726"),s("OutboundLink")],1)])]),t._v(" "),s("li",[s("p",[t._v("《JavaScript高级程序设计（第3版）》第4章的内容")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);